{"name": "test_access_without_token_header", "status": "skipped", "statusDetails": {"message": "XFAIL Sandbox may allow access even without token\n\nAssertionError: Expected 403 without token\nassert 200 == 403\n +  where 200 = <Response [200]>.status_code", "trace": "@pytest.mark.xfail(reason=\"Sandbox may allow access even without token\")\n    def test_access_without_token_header():\n        session, _ = authenticate()\n        response = session.get(f\"{BASE_URL}/dataservice/device\", verify=False)\n    \n>       assert response.status_code == 403, \"Expected 403 without token\"\nE       AssertionError: Expected 403 without token\nE       assert 200 == 403\nE        +  where 200 = <Response [200]>.status_code\n\ntest_token.py:29: AssertionError"}, "attachments": [{"name": "stdout", "source": "0f5fec7d-07da-41ea-ac7b-f8f4c80d3f04-attachment.txt", "type": "text/plain"}], "start": 1748810217380, "stop": 1748810220729, "uuid": "cc916649-e586-4761-9172-7fc345fc8936", "historyId": "bd34e29aa115ee7fc4c4202cf848c24c", "testCaseId": "bd34e29aa115ee7fc4c4202cf848c24c", "fullName": "test_token#test_access_without_token_header", "labels": [{"name": "tag", "value": "@pytest.mark.xfail(reason='Sandbox may allow access even without token')"}, {"name": "suite", "value": "test_token"}, {"name": "host", "value": "DESKTOP-DNH0THN"}, {"name": "thread", "value": "185924-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_token"}]}